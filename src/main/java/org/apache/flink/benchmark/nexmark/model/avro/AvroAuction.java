/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.apache.flink.benchmark.nexmark.model.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class AvroAuction extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1815768063006119807L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroAuction\",\"namespace\":\"org.apache.flink.benchmark.nexmark.model.avro\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"itemName\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"initialBid\",\"type\":\"long\"},{\"name\":\"reserve\",\"type\":\"long\"},{\"name\":\"ts\",\"type\":\"long\"},{\"name\":\"expires\",\"type\":\"long\"},{\"name\":\"seller\",\"type\":\"long\"},{\"name\":\"category\",\"type\":\"long\"},{\"name\":\"extra\",\"type\":[\"string\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroAuction> ENCODER =
      new BinaryMessageEncoder<AvroAuction>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroAuction> DECODER =
      new BinaryMessageDecoder<AvroAuction>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AvroAuction> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AvroAuction> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AvroAuction> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AvroAuction>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AvroAuction to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AvroAuction from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AvroAuction instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AvroAuction fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long id;
  @Deprecated public java.lang.CharSequence itemName;
  @Deprecated public java.lang.CharSequence description;
  @Deprecated public long initialBid;
  @Deprecated public long reserve;
  @Deprecated public long ts;
  @Deprecated public long expires;
  @Deprecated public long seller;
  @Deprecated public long category;
  @Deprecated public java.lang.CharSequence extra;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroAuction() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param itemName The new value for itemName
   * @param description The new value for description
   * @param initialBid The new value for initialBid
   * @param reserve The new value for reserve
   * @param ts The new value for ts
   * @param expires The new value for expires
   * @param seller The new value for seller
   * @param category The new value for category
   * @param extra The new value for extra
   */
  public AvroAuction(java.lang.Long id, java.lang.CharSequence itemName, java.lang.CharSequence description, java.lang.Long initialBid, java.lang.Long reserve, java.lang.Long ts, java.lang.Long expires, java.lang.Long seller, java.lang.Long category, java.lang.CharSequence extra) {
    this.id = id;
    this.itemName = itemName;
    this.description = description;
    this.initialBid = initialBid;
    this.reserve = reserve;
    this.ts = ts;
    this.expires = expires;
    this.seller = seller;
    this.category = category;
    this.extra = extra;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return itemName;
    case 2: return description;
    case 3: return initialBid;
    case 4: return reserve;
    case 5: return ts;
    case 6: return expires;
    case 7: return seller;
    case 8: return category;
    case 9: return extra;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: itemName = (java.lang.CharSequence)value$; break;
    case 2: description = (java.lang.CharSequence)value$; break;
    case 3: initialBid = (java.lang.Long)value$; break;
    case 4: reserve = (java.lang.Long)value$; break;
    case 5: ts = (java.lang.Long)value$; break;
    case 6: expires = (java.lang.Long)value$; break;
    case 7: seller = (java.lang.Long)value$; break;
    case 8: category = (java.lang.Long)value$; break;
    case 9: extra = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'itemName' field.
   * @return The value of the 'itemName' field.
   */
  public java.lang.CharSequence getItemName() {
    return itemName;
  }


  /**
   * Sets the value of the 'itemName' field.
   * @param value the value to set.
   */
  public void setItemName(java.lang.CharSequence value) {
    this.itemName = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return The value of the 'description' field.
   */
  public java.lang.CharSequence getDescription() {
    return description;
  }


  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.CharSequence value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'initialBid' field.
   * @return The value of the 'initialBid' field.
   */
  public long getInitialBid() {
    return initialBid;
  }


  /**
   * Sets the value of the 'initialBid' field.
   * @param value the value to set.
   */
  public void setInitialBid(long value) {
    this.initialBid = value;
  }

  /**
   * Gets the value of the 'reserve' field.
   * @return The value of the 'reserve' field.
   */
  public long getReserve() {
    return reserve;
  }


  /**
   * Sets the value of the 'reserve' field.
   * @param value the value to set.
   */
  public void setReserve(long value) {
    this.reserve = value;
  }

  /**
   * Gets the value of the 'ts' field.
   * @return The value of the 'ts' field.
   */
  public long getTs() {
    return ts;
  }


  /**
   * Sets the value of the 'ts' field.
   * @param value the value to set.
   */
  public void setTs(long value) {
    this.ts = value;
  }

  /**
   * Gets the value of the 'expires' field.
   * @return The value of the 'expires' field.
   */
  public long getExpires() {
    return expires;
  }


  /**
   * Sets the value of the 'expires' field.
   * @param value the value to set.
   */
  public void setExpires(long value) {
    this.expires = value;
  }

  /**
   * Gets the value of the 'seller' field.
   * @return The value of the 'seller' field.
   */
  public long getSeller() {
    return seller;
  }


  /**
   * Sets the value of the 'seller' field.
   * @param value the value to set.
   */
  public void setSeller(long value) {
    this.seller = value;
  }

  /**
   * Gets the value of the 'category' field.
   * @return The value of the 'category' field.
   */
  public long getCategory() {
    return category;
  }


  /**
   * Sets the value of the 'category' field.
   * @param value the value to set.
   */
  public void setCategory(long value) {
    this.category = value;
  }

  /**
   * Gets the value of the 'extra' field.
   * @return The value of the 'extra' field.
   */
  public java.lang.CharSequence getExtra() {
    return extra;
  }


  /**
   * Sets the value of the 'extra' field.
   * @param value the value to set.
   */
  public void setExtra(java.lang.CharSequence value) {
    this.extra = value;
  }

  /**
   * Creates a new AvroAuction RecordBuilder.
   * @return A new AvroAuction RecordBuilder
   */
  public static org.apache.flink.benchmark.nexmark.model.avro.AvroAuction.Builder newBuilder() {
    return new org.apache.flink.benchmark.nexmark.model.avro.AvroAuction.Builder();
  }

  /**
   * Creates a new AvroAuction RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroAuction RecordBuilder
   */
  public static org.apache.flink.benchmark.nexmark.model.avro.AvroAuction.Builder newBuilder(org.apache.flink.benchmark.nexmark.model.avro.AvroAuction.Builder other) {
    if (other == null) {
      return new org.apache.flink.benchmark.nexmark.model.avro.AvroAuction.Builder();
    } else {
      return new org.apache.flink.benchmark.nexmark.model.avro.AvroAuction.Builder(other);
    }
  }

  /**
   * Creates a new AvroAuction RecordBuilder by copying an existing AvroAuction instance.
   * @param other The existing instance to copy.
   * @return A new AvroAuction RecordBuilder
   */
  public static org.apache.flink.benchmark.nexmark.model.avro.AvroAuction.Builder newBuilder(org.apache.flink.benchmark.nexmark.model.avro.AvroAuction other) {
    if (other == null) {
      return new org.apache.flink.benchmark.nexmark.model.avro.AvroAuction.Builder();
    } else {
      return new org.apache.flink.benchmark.nexmark.model.avro.AvroAuction.Builder(other);
    }
  }

  /**
   * RecordBuilder for AvroAuction instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroAuction>
    implements org.apache.avro.data.RecordBuilder<AvroAuction> {

    private long id;
    private java.lang.CharSequence itemName;
    private java.lang.CharSequence description;
    private long initialBid;
    private long reserve;
    private long ts;
    private long expires;
    private long seller;
    private long category;
    private java.lang.CharSequence extra;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.flink.benchmark.nexmark.model.avro.AvroAuction.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.itemName)) {
        this.itemName = data().deepCopy(fields()[1].schema(), other.itemName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.initialBid)) {
        this.initialBid = data().deepCopy(fields()[3].schema(), other.initialBid);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.reserve)) {
        this.reserve = data().deepCopy(fields()[4].schema(), other.reserve);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.ts)) {
        this.ts = data().deepCopy(fields()[5].schema(), other.ts);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.expires)) {
        this.expires = data().deepCopy(fields()[6].schema(), other.expires);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.seller)) {
        this.seller = data().deepCopy(fields()[7].schema(), other.seller);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.category)) {
        this.category = data().deepCopy(fields()[8].schema(), other.category);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.extra)) {
        this.extra = data().deepCopy(fields()[9].schema(), other.extra);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
    }

    /**
     * Creates a Builder by copying an existing AvroAuction instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.flink.benchmark.nexmark.model.avro.AvroAuction other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.itemName)) {
        this.itemName = data().deepCopy(fields()[1].schema(), other.itemName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.initialBid)) {
        this.initialBid = data().deepCopy(fields()[3].schema(), other.initialBid);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.reserve)) {
        this.reserve = data().deepCopy(fields()[4].schema(), other.reserve);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.ts)) {
        this.ts = data().deepCopy(fields()[5].schema(), other.ts);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.expires)) {
        this.expires = data().deepCopy(fields()[6].schema(), other.expires);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.seller)) {
        this.seller = data().deepCopy(fields()[7].schema(), other.seller);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.category)) {
        this.category = data().deepCopy(fields()[8].schema(), other.category);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.extra)) {
        this.extra = data().deepCopy(fields()[9].schema(), other.extra);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroAuction.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroAuction.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'itemName' field.
      * @return The value.
      */
    public java.lang.CharSequence getItemName() {
      return itemName;
    }


    /**
      * Sets the value of the 'itemName' field.
      * @param value The value of 'itemName'.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroAuction.Builder setItemName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.itemName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'itemName' field has been set.
      * @return True if the 'itemName' field has been set, false otherwise.
      */
    public boolean hasItemName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'itemName' field.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroAuction.Builder clearItemName() {
      itemName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * @return The value.
      */
    public java.lang.CharSequence getDescription() {
      return description;
    }


    /**
      * Sets the value of the 'description' field.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroAuction.Builder setDescription(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.description = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'description' field.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroAuction.Builder clearDescription() {
      description = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'initialBid' field.
      * @return The value.
      */
    public long getInitialBid() {
      return initialBid;
    }


    /**
      * Sets the value of the 'initialBid' field.
      * @param value The value of 'initialBid'.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroAuction.Builder setInitialBid(long value) {
      validate(fields()[3], value);
      this.initialBid = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'initialBid' field has been set.
      * @return True if the 'initialBid' field has been set, false otherwise.
      */
    public boolean hasInitialBid() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'initialBid' field.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroAuction.Builder clearInitialBid() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'reserve' field.
      * @return The value.
      */
    public long getReserve() {
      return reserve;
    }


    /**
      * Sets the value of the 'reserve' field.
      * @param value The value of 'reserve'.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroAuction.Builder setReserve(long value) {
      validate(fields()[4], value);
      this.reserve = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'reserve' field has been set.
      * @return True if the 'reserve' field has been set, false otherwise.
      */
    public boolean hasReserve() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'reserve' field.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroAuction.Builder clearReserve() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'ts' field.
      * @return The value.
      */
    public long getTs() {
      return ts;
    }


    /**
      * Sets the value of the 'ts' field.
      * @param value The value of 'ts'.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroAuction.Builder setTs(long value) {
      validate(fields()[5], value);
      this.ts = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'ts' field has been set.
      * @return True if the 'ts' field has been set, false otherwise.
      */
    public boolean hasTs() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'ts' field.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroAuction.Builder clearTs() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'expires' field.
      * @return The value.
      */
    public long getExpires() {
      return expires;
    }


    /**
      * Sets the value of the 'expires' field.
      * @param value The value of 'expires'.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroAuction.Builder setExpires(long value) {
      validate(fields()[6], value);
      this.expires = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'expires' field has been set.
      * @return True if the 'expires' field has been set, false otherwise.
      */
    public boolean hasExpires() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'expires' field.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroAuction.Builder clearExpires() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'seller' field.
      * @return The value.
      */
    public long getSeller() {
      return seller;
    }


    /**
      * Sets the value of the 'seller' field.
      * @param value The value of 'seller'.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroAuction.Builder setSeller(long value) {
      validate(fields()[7], value);
      this.seller = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'seller' field has been set.
      * @return True if the 'seller' field has been set, false otherwise.
      */
    public boolean hasSeller() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'seller' field.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroAuction.Builder clearSeller() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'category' field.
      * @return The value.
      */
    public long getCategory() {
      return category;
    }


    /**
      * Sets the value of the 'category' field.
      * @param value The value of 'category'.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroAuction.Builder setCategory(long value) {
      validate(fields()[8], value);
      this.category = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'category' field has been set.
      * @return True if the 'category' field has been set, false otherwise.
      */
    public boolean hasCategory() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'category' field.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroAuction.Builder clearCategory() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'extra' field.
      * @return The value.
      */
    public java.lang.CharSequence getExtra() {
      return extra;
    }


    /**
      * Sets the value of the 'extra' field.
      * @param value The value of 'extra'.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroAuction.Builder setExtra(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.extra = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'extra' field has been set.
      * @return True if the 'extra' field has been set, false otherwise.
      */
    public boolean hasExtra() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'extra' field.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroAuction.Builder clearExtra() {
      extra = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroAuction build() {
      try {
        AvroAuction record = new AvroAuction();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.itemName = fieldSetFlags()[1] ? this.itemName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.description = fieldSetFlags()[2] ? this.description : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.initialBid = fieldSetFlags()[3] ? this.initialBid : (java.lang.Long) defaultValue(fields()[3]);
        record.reserve = fieldSetFlags()[4] ? this.reserve : (java.lang.Long) defaultValue(fields()[4]);
        record.ts = fieldSetFlags()[5] ? this.ts : (java.lang.Long) defaultValue(fields()[5]);
        record.expires = fieldSetFlags()[6] ? this.expires : (java.lang.Long) defaultValue(fields()[6]);
        record.seller = fieldSetFlags()[7] ? this.seller : (java.lang.Long) defaultValue(fields()[7]);
        record.category = fieldSetFlags()[8] ? this.category : (java.lang.Long) defaultValue(fields()[8]);
        record.extra = fieldSetFlags()[9] ? this.extra : (java.lang.CharSequence) defaultValue(fields()[9]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroAuction>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroAuction>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroAuction>
    READER$ = (org.apache.avro.io.DatumReader<AvroAuction>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.id);

    out.writeString(this.itemName);

    out.writeString(this.description);

    out.writeLong(this.initialBid);

    out.writeLong(this.reserve);

    out.writeLong(this.ts);

    out.writeLong(this.expires);

    out.writeLong(this.seller);

    out.writeLong(this.category);

    if (this.extra == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.extra);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readLong();

      this.itemName = in.readString(this.itemName instanceof Utf8 ? (Utf8)this.itemName : null);

      this.description = in.readString(this.description instanceof Utf8 ? (Utf8)this.description : null);

      this.initialBid = in.readLong();

      this.reserve = in.readLong();

      this.ts = in.readLong();

      this.expires = in.readLong();

      this.seller = in.readLong();

      this.category = in.readLong();

      if (in.readIndex() != 0) {
        in.readNull();
        this.extra = null;
      } else {
        this.extra = in.readString(this.extra instanceof Utf8 ? (Utf8)this.extra : null);
      }

    } else {
      for (int i = 0; i < 10; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readLong();
          break;

        case 1:
          this.itemName = in.readString(this.itemName instanceof Utf8 ? (Utf8)this.itemName : null);
          break;

        case 2:
          this.description = in.readString(this.description instanceof Utf8 ? (Utf8)this.description : null);
          break;

        case 3:
          this.initialBid = in.readLong();
          break;

        case 4:
          this.reserve = in.readLong();
          break;

        case 5:
          this.ts = in.readLong();
          break;

        case 6:
          this.expires = in.readLong();
          break;

        case 7:
          this.seller = in.readLong();
          break;

        case 8:
          this.category = in.readLong();
          break;

        case 9:
          if (in.readIndex() != 0) {
            in.readNull();
            this.extra = null;
          } else {
            this.extra = in.readString(this.extra instanceof Utf8 ? (Utf8)this.extra : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










