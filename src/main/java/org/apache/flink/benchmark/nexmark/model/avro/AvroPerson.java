/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.apache.flink.benchmark.nexmark.model.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AvroPerson extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3264799733065198827L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroPerson\",\"namespace\":\"org.apache.flink.benchmark.nexmark.model.avro\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"emailAddress\",\"type\":\"string\"},{\"name\":\"creditCard\",\"type\":\"string\"},{\"name\":\"city\",\"type\":\"string\"},{\"name\":\"state\",\"type\":\"string\"},{\"name\":\"ts\",\"type\":\"long\"},{\"name\":\"extra\",\"type\":[\"string\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroPerson> ENCODER =
      new BinaryMessageEncoder<AvroPerson>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroPerson> DECODER =
      new BinaryMessageDecoder<AvroPerson>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AvroPerson> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AvroPerson> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AvroPerson> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AvroPerson>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AvroPerson to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AvroPerson from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AvroPerson instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AvroPerson fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long id;
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public java.lang.CharSequence emailAddress;
  @Deprecated public java.lang.CharSequence creditCard;
  @Deprecated public java.lang.CharSequence city;
  @Deprecated public java.lang.CharSequence state;
  @Deprecated public long ts;
  @Deprecated public java.lang.CharSequence extra;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroPerson() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param name The new value for name
   * @param emailAddress The new value for emailAddress
   * @param creditCard The new value for creditCard
   * @param city The new value for city
   * @param state The new value for state
   * @param ts The new value for ts
   * @param extra The new value for extra
   */
  public AvroPerson(java.lang.Long id, java.lang.CharSequence name, java.lang.CharSequence emailAddress, java.lang.CharSequence creditCard, java.lang.CharSequence city, java.lang.CharSequence state, java.lang.Long ts, java.lang.CharSequence extra) {
    this.id = id;
    this.name = name;
    this.emailAddress = emailAddress;
    this.creditCard = creditCard;
    this.city = city;
    this.state = state;
    this.ts = ts;
    this.extra = extra;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    case 2: return emailAddress;
    case 3: return creditCard;
    case 4: return city;
    case 5: return state;
    case 6: return ts;
    case 7: return extra;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: emailAddress = (java.lang.CharSequence)value$; break;
    case 3: creditCard = (java.lang.CharSequence)value$; break;
    case 4: city = (java.lang.CharSequence)value$; break;
    case 5: state = (java.lang.CharSequence)value$; break;
    case 6: ts = (java.lang.Long)value$; break;
    case 7: extra = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'emailAddress' field.
   * @return The value of the 'emailAddress' field.
   */
  public java.lang.CharSequence getEmailAddress() {
    return emailAddress;
  }


  /**
   * Sets the value of the 'emailAddress' field.
   * @param value the value to set.
   */
  public void setEmailAddress(java.lang.CharSequence value) {
    this.emailAddress = value;
  }

  /**
   * Gets the value of the 'creditCard' field.
   * @return The value of the 'creditCard' field.
   */
  public java.lang.CharSequence getCreditCard() {
    return creditCard;
  }


  /**
   * Sets the value of the 'creditCard' field.
   * @param value the value to set.
   */
  public void setCreditCard(java.lang.CharSequence value) {
    this.creditCard = value;
  }

  /**
   * Gets the value of the 'city' field.
   * @return The value of the 'city' field.
   */
  public java.lang.CharSequence getCity() {
    return city;
  }


  /**
   * Sets the value of the 'city' field.
   * @param value the value to set.
   */
  public void setCity(java.lang.CharSequence value) {
    this.city = value;
  }

  /**
   * Gets the value of the 'state' field.
   * @return The value of the 'state' field.
   */
  public java.lang.CharSequence getState() {
    return state;
  }


  /**
   * Sets the value of the 'state' field.
   * @param value the value to set.
   */
  public void setState(java.lang.CharSequence value) {
    this.state = value;
  }

  /**
   * Gets the value of the 'ts' field.
   * @return The value of the 'ts' field.
   */
  public long getTs() {
    return ts;
  }


  /**
   * Sets the value of the 'ts' field.
   * @param value the value to set.
   */
  public void setTs(long value) {
    this.ts = value;
  }

  /**
   * Gets the value of the 'extra' field.
   * @return The value of the 'extra' field.
   */
  public java.lang.CharSequence getExtra() {
    return extra;
  }


  /**
   * Sets the value of the 'extra' field.
   * @param value the value to set.
   */
  public void setExtra(java.lang.CharSequence value) {
    this.extra = value;
  }

  /**
   * Creates a new AvroPerson RecordBuilder.
   * @return A new AvroPerson RecordBuilder
   */
  public static org.apache.flink.benchmark.nexmark.model.avro.AvroPerson.Builder newBuilder() {
    return new org.apache.flink.benchmark.nexmark.model.avro.AvroPerson.Builder();
  }

  /**
   * Creates a new AvroPerson RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroPerson RecordBuilder
   */
  public static org.apache.flink.benchmark.nexmark.model.avro.AvroPerson.Builder newBuilder(org.apache.flink.benchmark.nexmark.model.avro.AvroPerson.Builder other) {
    if (other == null) {
      return new org.apache.flink.benchmark.nexmark.model.avro.AvroPerson.Builder();
    } else {
      return new org.apache.flink.benchmark.nexmark.model.avro.AvroPerson.Builder(other);
    }
  }

  /**
   * Creates a new AvroPerson RecordBuilder by copying an existing AvroPerson instance.
   * @param other The existing instance to copy.
   * @return A new AvroPerson RecordBuilder
   */
  public static org.apache.flink.benchmark.nexmark.model.avro.AvroPerson.Builder newBuilder(org.apache.flink.benchmark.nexmark.model.avro.AvroPerson other) {
    if (other == null) {
      return new org.apache.flink.benchmark.nexmark.model.avro.AvroPerson.Builder();
    } else {
      return new org.apache.flink.benchmark.nexmark.model.avro.AvroPerson.Builder(other);
    }
  }

  /**
   * RecordBuilder for AvroPerson instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroPerson>
    implements org.apache.avro.data.RecordBuilder<AvroPerson> {

    private long id;
    private java.lang.CharSequence name;
    private java.lang.CharSequence emailAddress;
    private java.lang.CharSequence creditCard;
    private java.lang.CharSequence city;
    private java.lang.CharSequence state;
    private long ts;
    private java.lang.CharSequence extra;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.flink.benchmark.nexmark.model.avro.AvroPerson.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.emailAddress)) {
        this.emailAddress = data().deepCopy(fields()[2].schema(), other.emailAddress);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.creditCard)) {
        this.creditCard = data().deepCopy(fields()[3].schema(), other.creditCard);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.city)) {
        this.city = data().deepCopy(fields()[4].schema(), other.city);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.state)) {
        this.state = data().deepCopy(fields()[5].schema(), other.state);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.ts)) {
        this.ts = data().deepCopy(fields()[6].schema(), other.ts);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.extra)) {
        this.extra = data().deepCopy(fields()[7].schema(), other.extra);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing AvroPerson instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.flink.benchmark.nexmark.model.avro.AvroPerson other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.emailAddress)) {
        this.emailAddress = data().deepCopy(fields()[2].schema(), other.emailAddress);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.creditCard)) {
        this.creditCard = data().deepCopy(fields()[3].schema(), other.creditCard);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.city)) {
        this.city = data().deepCopy(fields()[4].schema(), other.city);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.state)) {
        this.state = data().deepCopy(fields()[5].schema(), other.state);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.ts)) {
        this.ts = data().deepCopy(fields()[6].schema(), other.ts);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.extra)) {
        this.extra = data().deepCopy(fields()[7].schema(), other.extra);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroPerson.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroPerson.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroPerson.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroPerson.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'emailAddress' field.
      * @return The value.
      */
    public java.lang.CharSequence getEmailAddress() {
      return emailAddress;
    }


    /**
      * Sets the value of the 'emailAddress' field.
      * @param value The value of 'emailAddress'.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroPerson.Builder setEmailAddress(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.emailAddress = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'emailAddress' field has been set.
      * @return True if the 'emailAddress' field has been set, false otherwise.
      */
    public boolean hasEmailAddress() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'emailAddress' field.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroPerson.Builder clearEmailAddress() {
      emailAddress = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'creditCard' field.
      * @return The value.
      */
    public java.lang.CharSequence getCreditCard() {
      return creditCard;
    }


    /**
      * Sets the value of the 'creditCard' field.
      * @param value The value of 'creditCard'.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroPerson.Builder setCreditCard(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.creditCard = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'creditCard' field has been set.
      * @return True if the 'creditCard' field has been set, false otherwise.
      */
    public boolean hasCreditCard() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'creditCard' field.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroPerson.Builder clearCreditCard() {
      creditCard = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'city' field.
      * @return The value.
      */
    public java.lang.CharSequence getCity() {
      return city;
    }


    /**
      * Sets the value of the 'city' field.
      * @param value The value of 'city'.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroPerson.Builder setCity(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.city = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'city' field has been set.
      * @return True if the 'city' field has been set, false otherwise.
      */
    public boolean hasCity() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'city' field.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroPerson.Builder clearCity() {
      city = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'state' field.
      * @return The value.
      */
    public java.lang.CharSequence getState() {
      return state;
    }


    /**
      * Sets the value of the 'state' field.
      * @param value The value of 'state'.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroPerson.Builder setState(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.state = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'state' field has been set.
      * @return True if the 'state' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'state' field.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroPerson.Builder clearState() {
      state = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'ts' field.
      * @return The value.
      */
    public long getTs() {
      return ts;
    }


    /**
      * Sets the value of the 'ts' field.
      * @param value The value of 'ts'.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroPerson.Builder setTs(long value) {
      validate(fields()[6], value);
      this.ts = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'ts' field has been set.
      * @return True if the 'ts' field has been set, false otherwise.
      */
    public boolean hasTs() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'ts' field.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroPerson.Builder clearTs() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'extra' field.
      * @return The value.
      */
    public java.lang.CharSequence getExtra() {
      return extra;
    }


    /**
      * Sets the value of the 'extra' field.
      * @param value The value of 'extra'.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroPerson.Builder setExtra(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.extra = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'extra' field has been set.
      * @return True if the 'extra' field has been set, false otherwise.
      */
    public boolean hasExtra() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'extra' field.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroPerson.Builder clearExtra() {
      extra = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroPerson build() {
      try {
        AvroPerson record = new AvroPerson();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.emailAddress = fieldSetFlags()[2] ? this.emailAddress : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.creditCard = fieldSetFlags()[3] ? this.creditCard : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.city = fieldSetFlags()[4] ? this.city : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.state = fieldSetFlags()[5] ? this.state : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.ts = fieldSetFlags()[6] ? this.ts : (java.lang.Long) defaultValue(fields()[6]);
        record.extra = fieldSetFlags()[7] ? this.extra : (java.lang.CharSequence) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroPerson>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroPerson>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroPerson>
    READER$ = (org.apache.avro.io.DatumReader<AvroPerson>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.id);

    out.writeString(this.name);

    out.writeString(this.emailAddress);

    out.writeString(this.creditCard);

    out.writeString(this.city);

    out.writeString(this.state);

    out.writeLong(this.ts);

    if (this.extra == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.extra);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readLong();

      this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);

      this.emailAddress = in.readString(this.emailAddress instanceof Utf8 ? (Utf8)this.emailAddress : null);

      this.creditCard = in.readString(this.creditCard instanceof Utf8 ? (Utf8)this.creditCard : null);

      this.city = in.readString(this.city instanceof Utf8 ? (Utf8)this.city : null);

      this.state = in.readString(this.state instanceof Utf8 ? (Utf8)this.state : null);

      this.ts = in.readLong();

      if (in.readIndex() != 0) {
        in.readNull();
        this.extra = null;
      } else {
        this.extra = in.readString(this.extra instanceof Utf8 ? (Utf8)this.extra : null);
      }

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readLong();
          break;

        case 1:
          this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
          break;

        case 2:
          this.emailAddress = in.readString(this.emailAddress instanceof Utf8 ? (Utf8)this.emailAddress : null);
          break;

        case 3:
          this.creditCard = in.readString(this.creditCard instanceof Utf8 ? (Utf8)this.creditCard : null);
          break;

        case 4:
          this.city = in.readString(this.city instanceof Utf8 ? (Utf8)this.city : null);
          break;

        case 5:
          this.state = in.readString(this.state instanceof Utf8 ? (Utf8)this.state : null);
          break;

        case 6:
          this.ts = in.readLong();
          break;

        case 7:
          if (in.readIndex() != 0) {
            in.readNull();
            this.extra = null;
          } else {
            this.extra = in.readString(this.extra instanceof Utf8 ? (Utf8)this.extra : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










