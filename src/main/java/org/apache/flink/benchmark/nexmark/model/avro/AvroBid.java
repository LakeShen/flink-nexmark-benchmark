/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.apache.flink.benchmark.nexmark.model.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AvroBid extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7728699784490602197L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroBid\",\"namespace\":\"org.apache.flink.benchmark.nexmark.model.avro\",\"fields\":[{\"name\":\"auction\",\"type\":\"long\"},{\"name\":\"bidder\",\"type\":\"long\"},{\"name\":\"price\",\"type\":\"long\"},{\"name\":\"ts\",\"type\":\"long\"},{\"name\":\"extra\",\"type\":[\"string\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroBid> ENCODER =
      new BinaryMessageEncoder<AvroBid>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroBid> DECODER =
      new BinaryMessageDecoder<AvroBid>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AvroBid> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AvroBid> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AvroBid> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AvroBid>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AvroBid to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AvroBid from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AvroBid instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AvroBid fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long auction;
  @Deprecated public long bidder;
  @Deprecated public long price;
  @Deprecated public long ts;
  @Deprecated public java.lang.CharSequence extra;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroBid() {}

  /**
   * All-args constructor.
   * @param auction The new value for auction
   * @param bidder The new value for bidder
   * @param price The new value for price
   * @param ts The new value for ts
   * @param extra The new value for extra
   */
  public AvroBid(java.lang.Long auction, java.lang.Long bidder, java.lang.Long price, java.lang.Long ts, java.lang.CharSequence extra) {
    this.auction = auction;
    this.bidder = bidder;
    this.price = price;
    this.ts = ts;
    this.extra = extra;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return auction;
    case 1: return bidder;
    case 2: return price;
    case 3: return ts;
    case 4: return extra;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: auction = (java.lang.Long)value$; break;
    case 1: bidder = (java.lang.Long)value$; break;
    case 2: price = (java.lang.Long)value$; break;
    case 3: ts = (java.lang.Long)value$; break;
    case 4: extra = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'auction' field.
   * @return The value of the 'auction' field.
   */
  public long getAuction() {
    return auction;
  }


  /**
   * Sets the value of the 'auction' field.
   * @param value the value to set.
   */
  public void setAuction(long value) {
    this.auction = value;
  }

  /**
   * Gets the value of the 'bidder' field.
   * @return The value of the 'bidder' field.
   */
  public long getBidder() {
    return bidder;
  }


  /**
   * Sets the value of the 'bidder' field.
   * @param value the value to set.
   */
  public void setBidder(long value) {
    this.bidder = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public long getPrice() {
    return price;
  }


  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(long value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'ts' field.
   * @return The value of the 'ts' field.
   */
  public long getTs() {
    return ts;
  }


  /**
   * Sets the value of the 'ts' field.
   * @param value the value to set.
   */
  public void setTs(long value) {
    this.ts = value;
  }

  /**
   * Gets the value of the 'extra' field.
   * @return The value of the 'extra' field.
   */
  public java.lang.CharSequence getExtra() {
    return extra;
  }


  /**
   * Sets the value of the 'extra' field.
   * @param value the value to set.
   */
  public void setExtra(java.lang.CharSequence value) {
    this.extra = value;
  }

  /**
   * Creates a new AvroBid RecordBuilder.
   * @return A new AvroBid RecordBuilder
   */
  public static org.apache.flink.benchmark.nexmark.model.avro.AvroBid.Builder newBuilder() {
    return new org.apache.flink.benchmark.nexmark.model.avro.AvroBid.Builder();
  }

  /**
   * Creates a new AvroBid RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroBid RecordBuilder
   */
  public static org.apache.flink.benchmark.nexmark.model.avro.AvroBid.Builder newBuilder(org.apache.flink.benchmark.nexmark.model.avro.AvroBid.Builder other) {
    if (other == null) {
      return new org.apache.flink.benchmark.nexmark.model.avro.AvroBid.Builder();
    } else {
      return new org.apache.flink.benchmark.nexmark.model.avro.AvroBid.Builder(other);
    }
  }

  /**
   * Creates a new AvroBid RecordBuilder by copying an existing AvroBid instance.
   * @param other The existing instance to copy.
   * @return A new AvroBid RecordBuilder
   */
  public static org.apache.flink.benchmark.nexmark.model.avro.AvroBid.Builder newBuilder(org.apache.flink.benchmark.nexmark.model.avro.AvroBid other) {
    if (other == null) {
      return new org.apache.flink.benchmark.nexmark.model.avro.AvroBid.Builder();
    } else {
      return new org.apache.flink.benchmark.nexmark.model.avro.AvroBid.Builder(other);
    }
  }

  /**
   * RecordBuilder for AvroBid instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroBid>
    implements org.apache.avro.data.RecordBuilder<AvroBid> {

    private long auction;
    private long bidder;
    private long price;
    private long ts;
    private java.lang.CharSequence extra;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.flink.benchmark.nexmark.model.avro.AvroBid.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.auction)) {
        this.auction = data().deepCopy(fields()[0].schema(), other.auction);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.bidder)) {
        this.bidder = data().deepCopy(fields()[1].schema(), other.bidder);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.price)) {
        this.price = data().deepCopy(fields()[2].schema(), other.price);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.ts)) {
        this.ts = data().deepCopy(fields()[3].schema(), other.ts);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.extra)) {
        this.extra = data().deepCopy(fields()[4].schema(), other.extra);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing AvroBid instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.flink.benchmark.nexmark.model.avro.AvroBid other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.auction)) {
        this.auction = data().deepCopy(fields()[0].schema(), other.auction);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.bidder)) {
        this.bidder = data().deepCopy(fields()[1].schema(), other.bidder);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.price)) {
        this.price = data().deepCopy(fields()[2].schema(), other.price);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ts)) {
        this.ts = data().deepCopy(fields()[3].schema(), other.ts);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.extra)) {
        this.extra = data().deepCopy(fields()[4].schema(), other.extra);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'auction' field.
      * @return The value.
      */
    public long getAuction() {
      return auction;
    }


    /**
      * Sets the value of the 'auction' field.
      * @param value The value of 'auction'.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroBid.Builder setAuction(long value) {
      validate(fields()[0], value);
      this.auction = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'auction' field has been set.
      * @return True if the 'auction' field has been set, false otherwise.
      */
    public boolean hasAuction() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'auction' field.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroBid.Builder clearAuction() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'bidder' field.
      * @return The value.
      */
    public long getBidder() {
      return bidder;
    }


    /**
      * Sets the value of the 'bidder' field.
      * @param value The value of 'bidder'.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroBid.Builder setBidder(long value) {
      validate(fields()[1], value);
      this.bidder = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'bidder' field has been set.
      * @return True if the 'bidder' field has been set, false otherwise.
      */
    public boolean hasBidder() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'bidder' field.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroBid.Builder clearBidder() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public long getPrice() {
      return price;
    }


    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroBid.Builder setPrice(long value) {
      validate(fields()[2], value);
      this.price = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroBid.Builder clearPrice() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'ts' field.
      * @return The value.
      */
    public long getTs() {
      return ts;
    }


    /**
      * Sets the value of the 'ts' field.
      * @param value The value of 'ts'.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroBid.Builder setTs(long value) {
      validate(fields()[3], value);
      this.ts = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'ts' field has been set.
      * @return True if the 'ts' field has been set, false otherwise.
      */
    public boolean hasTs() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'ts' field.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroBid.Builder clearTs() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'extra' field.
      * @return The value.
      */
    public java.lang.CharSequence getExtra() {
      return extra;
    }


    /**
      * Sets the value of the 'extra' field.
      * @param value The value of 'extra'.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroBid.Builder setExtra(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.extra = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'extra' field has been set.
      * @return True if the 'extra' field has been set, false otherwise.
      */
    public boolean hasExtra() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'extra' field.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroBid.Builder clearExtra() {
      extra = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroBid build() {
      try {
        AvroBid record = new AvroBid();
        record.auction = fieldSetFlags()[0] ? this.auction : (java.lang.Long) defaultValue(fields()[0]);
        record.bidder = fieldSetFlags()[1] ? this.bidder : (java.lang.Long) defaultValue(fields()[1]);
        record.price = fieldSetFlags()[2] ? this.price : (java.lang.Long) defaultValue(fields()[2]);
        record.ts = fieldSetFlags()[3] ? this.ts : (java.lang.Long) defaultValue(fields()[3]);
        record.extra = fieldSetFlags()[4] ? this.extra : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroBid>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroBid>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroBid>
    READER$ = (org.apache.avro.io.DatumReader<AvroBid>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.auction);

    out.writeLong(this.bidder);

    out.writeLong(this.price);

    out.writeLong(this.ts);

    if (this.extra == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.extra);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.auction = in.readLong();

      this.bidder = in.readLong();

      this.price = in.readLong();

      this.ts = in.readLong();

      if (in.readIndex() != 0) {
        in.readNull();
        this.extra = null;
      } else {
        this.extra = in.readString(this.extra instanceof Utf8 ? (Utf8)this.extra : null);
      }

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.auction = in.readLong();
          break;

        case 1:
          this.bidder = in.readLong();
          break;

        case 2:
          this.price = in.readLong();
          break;

        case 3:
          this.ts = in.readLong();
          break;

        case 4:
          if (in.readIndex() != 0) {
            in.readNull();
            this.extra = null;
          } else {
            this.extra = in.readString(this.extra instanceof Utf8 ? (Utf8)this.extra : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










