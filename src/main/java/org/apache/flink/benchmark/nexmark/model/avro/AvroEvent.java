/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.apache.flink.benchmark.nexmark.model.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AvroEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3639880639081132328L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroEvent\",\"namespace\":\"org.apache.flink.benchmark.nexmark.model.avro\",\"fields\":[{\"name\":\"bid\",\"type\":{\"type\":\"record\",\"name\":\"AvroBid\",\"fields\":[{\"name\":\"auction\",\"type\":\"long\"},{\"name\":\"bidder\",\"type\":\"long\"},{\"name\":\"price\",\"type\":\"long\"},{\"name\":\"ts\",\"type\":\"long\"},{\"name\":\"extra\",\"type\":[\"string\",\"null\"]}]}},{\"name\":\"person\",\"type\":{\"type\":\"record\",\"name\":\"AvroPerson\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"emailAddress\",\"type\":\"string\"},{\"name\":\"creditCard\",\"type\":\"string\"},{\"name\":\"city\",\"type\":\"string\"},{\"name\":\"state\",\"type\":\"string\"},{\"name\":\"ts\",\"type\":\"long\"},{\"name\":\"extra\",\"type\":[\"string\",\"null\"]}]}},{\"name\":\"auction\",\"type\":{\"type\":\"record\",\"name\":\"AvroAuction\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"itemName\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"initialBid\",\"type\":\"long\"},{\"name\":\"reserve\",\"type\":\"long\"},{\"name\":\"ts\",\"type\":\"long\"},{\"name\":\"expires\",\"type\":\"long\"},{\"name\":\"seller\",\"type\":\"long\"},{\"name\":\"category\",\"type\":\"long\"},{\"name\":\"extra\",\"type\":[\"string\",\"null\"]}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroEvent> ENCODER =
      new BinaryMessageEncoder<AvroEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroEvent> DECODER =
      new BinaryMessageDecoder<AvroEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AvroEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AvroEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AvroEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AvroEvent>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AvroEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AvroEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AvroEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AvroEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public org.apache.flink.benchmark.nexmark.model.avro.AvroBid bid;
  @Deprecated public org.apache.flink.benchmark.nexmark.model.avro.AvroPerson person;
  @Deprecated public org.apache.flink.benchmark.nexmark.model.avro.AvroAuction auction;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroEvent() {}

  /**
   * All-args constructor.
   * @param bid The new value for bid
   * @param person The new value for person
   * @param auction The new value for auction
   */
  public AvroEvent(org.apache.flink.benchmark.nexmark.model.avro.AvroBid bid, org.apache.flink.benchmark.nexmark.model.avro.AvroPerson person, org.apache.flink.benchmark.nexmark.model.avro.AvroAuction auction) {
    this.bid = bid;
    this.person = person;
    this.auction = auction;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return bid;
    case 1: return person;
    case 2: return auction;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: bid = (org.apache.flink.benchmark.nexmark.model.avro.AvroBid)value$; break;
    case 1: person = (org.apache.flink.benchmark.nexmark.model.avro.AvroPerson)value$; break;
    case 2: auction = (org.apache.flink.benchmark.nexmark.model.avro.AvroAuction)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'bid' field.
   * @return The value of the 'bid' field.
   */
  public org.apache.flink.benchmark.nexmark.model.avro.AvroBid getBid() {
    return bid;
  }


  /**
   * Sets the value of the 'bid' field.
   * @param value the value to set.
   */
  public void setBid(org.apache.flink.benchmark.nexmark.model.avro.AvroBid value) {
    this.bid = value;
  }

  /**
   * Gets the value of the 'person' field.
   * @return The value of the 'person' field.
   */
  public org.apache.flink.benchmark.nexmark.model.avro.AvroPerson getPerson() {
    return person;
  }


  /**
   * Sets the value of the 'person' field.
   * @param value the value to set.
   */
  public void setPerson(org.apache.flink.benchmark.nexmark.model.avro.AvroPerson value) {
    this.person = value;
  }

  /**
   * Gets the value of the 'auction' field.
   * @return The value of the 'auction' field.
   */
  public org.apache.flink.benchmark.nexmark.model.avro.AvroAuction getAuction() {
    return auction;
  }


  /**
   * Sets the value of the 'auction' field.
   * @param value the value to set.
   */
  public void setAuction(org.apache.flink.benchmark.nexmark.model.avro.AvroAuction value) {
    this.auction = value;
  }

  /**
   * Creates a new AvroEvent RecordBuilder.
   * @return A new AvroEvent RecordBuilder
   */
  public static org.apache.flink.benchmark.nexmark.model.avro.AvroEvent.Builder newBuilder() {
    return new org.apache.flink.benchmark.nexmark.model.avro.AvroEvent.Builder();
  }

  /**
   * Creates a new AvroEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroEvent RecordBuilder
   */
  public static org.apache.flink.benchmark.nexmark.model.avro.AvroEvent.Builder newBuilder(org.apache.flink.benchmark.nexmark.model.avro.AvroEvent.Builder other) {
    if (other == null) {
      return new org.apache.flink.benchmark.nexmark.model.avro.AvroEvent.Builder();
    } else {
      return new org.apache.flink.benchmark.nexmark.model.avro.AvroEvent.Builder(other);
    }
  }

  /**
   * Creates a new AvroEvent RecordBuilder by copying an existing AvroEvent instance.
   * @param other The existing instance to copy.
   * @return A new AvroEvent RecordBuilder
   */
  public static org.apache.flink.benchmark.nexmark.model.avro.AvroEvent.Builder newBuilder(org.apache.flink.benchmark.nexmark.model.avro.AvroEvent other) {
    if (other == null) {
      return new org.apache.flink.benchmark.nexmark.model.avro.AvroEvent.Builder();
    } else {
      return new org.apache.flink.benchmark.nexmark.model.avro.AvroEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for AvroEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroEvent>
    implements org.apache.avro.data.RecordBuilder<AvroEvent> {

    private org.apache.flink.benchmark.nexmark.model.avro.AvroBid bid;
    private org.apache.flink.benchmark.nexmark.model.avro.AvroBid.Builder bidBuilder;
    private org.apache.flink.benchmark.nexmark.model.avro.AvroPerson person;
    private org.apache.flink.benchmark.nexmark.model.avro.AvroPerson.Builder personBuilder;
    private org.apache.flink.benchmark.nexmark.model.avro.AvroAuction auction;
    private org.apache.flink.benchmark.nexmark.model.avro.AvroAuction.Builder auctionBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.flink.benchmark.nexmark.model.avro.AvroEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.bid)) {
        this.bid = data().deepCopy(fields()[0].schema(), other.bid);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasBidBuilder()) {
        this.bidBuilder = org.apache.flink.benchmark.nexmark.model.avro.AvroBid.newBuilder(other.getBidBuilder());
      }
      if (isValidValue(fields()[1], other.person)) {
        this.person = data().deepCopy(fields()[1].schema(), other.person);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasPersonBuilder()) {
        this.personBuilder = org.apache.flink.benchmark.nexmark.model.avro.AvroPerson.newBuilder(other.getPersonBuilder());
      }
      if (isValidValue(fields()[2], other.auction)) {
        this.auction = data().deepCopy(fields()[2].schema(), other.auction);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasAuctionBuilder()) {
        this.auctionBuilder = org.apache.flink.benchmark.nexmark.model.avro.AvroAuction.newBuilder(other.getAuctionBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing AvroEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.flink.benchmark.nexmark.model.avro.AvroEvent other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.bid)) {
        this.bid = data().deepCopy(fields()[0].schema(), other.bid);
        fieldSetFlags()[0] = true;
      }
      this.bidBuilder = null;
      if (isValidValue(fields()[1], other.person)) {
        this.person = data().deepCopy(fields()[1].schema(), other.person);
        fieldSetFlags()[1] = true;
      }
      this.personBuilder = null;
      if (isValidValue(fields()[2], other.auction)) {
        this.auction = data().deepCopy(fields()[2].schema(), other.auction);
        fieldSetFlags()[2] = true;
      }
      this.auctionBuilder = null;
    }

    /**
      * Gets the value of the 'bid' field.
      * @return The value.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroBid getBid() {
      return bid;
    }


    /**
      * Sets the value of the 'bid' field.
      * @param value The value of 'bid'.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroEvent.Builder setBid(org.apache.flink.benchmark.nexmark.model.avro.AvroBid value) {
      validate(fields()[0], value);
      this.bidBuilder = null;
      this.bid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'bid' field has been set.
      * @return True if the 'bid' field has been set, false otherwise.
      */
    public boolean hasBid() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'bid' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroBid.Builder getBidBuilder() {
      if (bidBuilder == null) {
        if (hasBid()) {
          setBidBuilder(org.apache.flink.benchmark.nexmark.model.avro.AvroBid.newBuilder(bid));
        } else {
          setBidBuilder(org.apache.flink.benchmark.nexmark.model.avro.AvroBid.newBuilder());
        }
      }
      return bidBuilder;
    }

    /**
     * Sets the Builder instance for the 'bid' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroEvent.Builder setBidBuilder(org.apache.flink.benchmark.nexmark.model.avro.AvroBid.Builder value) {
      clearBid();
      bidBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'bid' field has an active Builder instance
     * @return True if the 'bid' field has an active Builder instance
     */
    public boolean hasBidBuilder() {
      return bidBuilder != null;
    }

    /**
      * Clears the value of the 'bid' field.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroEvent.Builder clearBid() {
      bid = null;
      bidBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'person' field.
      * @return The value.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroPerson getPerson() {
      return person;
    }


    /**
      * Sets the value of the 'person' field.
      * @param value The value of 'person'.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroEvent.Builder setPerson(org.apache.flink.benchmark.nexmark.model.avro.AvroPerson value) {
      validate(fields()[1], value);
      this.personBuilder = null;
      this.person = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'person' field has been set.
      * @return True if the 'person' field has been set, false otherwise.
      */
    public boolean hasPerson() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'person' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroPerson.Builder getPersonBuilder() {
      if (personBuilder == null) {
        if (hasPerson()) {
          setPersonBuilder(org.apache.flink.benchmark.nexmark.model.avro.AvroPerson.newBuilder(person));
        } else {
          setPersonBuilder(org.apache.flink.benchmark.nexmark.model.avro.AvroPerson.newBuilder());
        }
      }
      return personBuilder;
    }

    /**
     * Sets the Builder instance for the 'person' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroEvent.Builder setPersonBuilder(org.apache.flink.benchmark.nexmark.model.avro.AvroPerson.Builder value) {
      clearPerson();
      personBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'person' field has an active Builder instance
     * @return True if the 'person' field has an active Builder instance
     */
    public boolean hasPersonBuilder() {
      return personBuilder != null;
    }

    /**
      * Clears the value of the 'person' field.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroEvent.Builder clearPerson() {
      person = null;
      personBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'auction' field.
      * @return The value.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroAuction getAuction() {
      return auction;
    }


    /**
      * Sets the value of the 'auction' field.
      * @param value The value of 'auction'.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroEvent.Builder setAuction(org.apache.flink.benchmark.nexmark.model.avro.AvroAuction value) {
      validate(fields()[2], value);
      this.auctionBuilder = null;
      this.auction = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'auction' field has been set.
      * @return True if the 'auction' field has been set, false otherwise.
      */
    public boolean hasAuction() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'auction' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroAuction.Builder getAuctionBuilder() {
      if (auctionBuilder == null) {
        if (hasAuction()) {
          setAuctionBuilder(org.apache.flink.benchmark.nexmark.model.avro.AvroAuction.newBuilder(auction));
        } else {
          setAuctionBuilder(org.apache.flink.benchmark.nexmark.model.avro.AvroAuction.newBuilder());
        }
      }
      return auctionBuilder;
    }

    /**
     * Sets the Builder instance for the 'auction' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroEvent.Builder setAuctionBuilder(org.apache.flink.benchmark.nexmark.model.avro.AvroAuction.Builder value) {
      clearAuction();
      auctionBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'auction' field has an active Builder instance
     * @return True if the 'auction' field has an active Builder instance
     */
    public boolean hasAuctionBuilder() {
      return auctionBuilder != null;
    }

    /**
      * Clears the value of the 'auction' field.
      * @return This builder.
      */
    public org.apache.flink.benchmark.nexmark.model.avro.AvroEvent.Builder clearAuction() {
      auction = null;
      auctionBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroEvent build() {
      try {
        AvroEvent record = new AvroEvent();
        if (bidBuilder != null) {
          try {
            record.bid = this.bidBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("bid"));
            throw e;
          }
        } else {
          record.bid = fieldSetFlags()[0] ? this.bid : (org.apache.flink.benchmark.nexmark.model.avro.AvroBid) defaultValue(fields()[0]);
        }
        if (personBuilder != null) {
          try {
            record.person = this.personBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("person"));
            throw e;
          }
        } else {
          record.person = fieldSetFlags()[1] ? this.person : (org.apache.flink.benchmark.nexmark.model.avro.AvroPerson) defaultValue(fields()[1]);
        }
        if (auctionBuilder != null) {
          try {
            record.auction = this.auctionBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("auction"));
            throw e;
          }
        } else {
          record.auction = fieldSetFlags()[2] ? this.auction : (org.apache.flink.benchmark.nexmark.model.avro.AvroAuction) defaultValue(fields()[2]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroEvent>
    READER$ = (org.apache.avro.io.DatumReader<AvroEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.bid.customEncode(out);

    this.person.customEncode(out);

    this.auction.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.bid == null) {
        this.bid = new org.apache.flink.benchmark.nexmark.model.avro.AvroBid();
      }
      this.bid.customDecode(in);

      if (this.person == null) {
        this.person = new org.apache.flink.benchmark.nexmark.model.avro.AvroPerson();
      }
      this.person.customDecode(in);

      if (this.auction == null) {
        this.auction = new org.apache.flink.benchmark.nexmark.model.avro.AvroAuction();
      }
      this.auction.customDecode(in);

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.bid == null) {
            this.bid = new org.apache.flink.benchmark.nexmark.model.avro.AvroBid();
          }
          this.bid.customDecode(in);
          break;

        case 1:
          if (this.person == null) {
            this.person = new org.apache.flink.benchmark.nexmark.model.avro.AvroPerson();
          }
          this.person.customDecode(in);
          break;

        case 2:
          if (this.auction == null) {
            this.auction = new org.apache.flink.benchmark.nexmark.model.avro.AvroAuction();
          }
          this.auction.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










